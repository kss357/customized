<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>게시물 상세</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.cdnfonts.com/css/neuething-sans-test" rel="stylesheet">
    <style>
        :root {
            --color-background: #1A1A1A;
            --color-surface: #242424;
            --color-text: #FFF;
            --color-text-secondary: #B7B7C9;
            --color-primary: #7B3AE4;
            --color-border: #2D2D2D;
            --color-blue-500: #0093FF;
            --color-darkpurple-200: #B7B7C9;
            --color-darkpurple-400: #7B7A8E;
            --content-width: 1080px;
        }

        body {
            background-color: var(--color-background);
            color: var(--color-text);
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
        }

        .nav-wrapper {
            width: 100%;
            height: 70px;
            border-bottom: 1px solid var(--color-border);
            display: flex;
            justify-content: center;
            margin-bottom: 40px;
        }

        .nav {
            width: var(--content-width);
            height: 100%;
            display: flex;
            align-items: center;
        }

        .nav-title {
            font-family: 'Neuething Sans Test', sans-serif;
            font-size: 15px;
            font-weight: 700;
            font-style: normal;
            line-height: 22px;
            color: var(--color-text);
            text-align: center;
            font-feature-settings: 'liga' off, 'clig' off;
        }

        .container {
            max-width: var(--content-width);
            margin: 0 auto;
            padding: 0;
        }

        .detail-card {
            background: rgba(255, 255, 255, 0.04);
            border-radius: 20px;
            border: 1px solid var(--Color-Darkpurple-800, #31313C);
            padding: 40px;
            margin-bottom: 24px;
            width: 1080px;
        }

        .detail-content-wrapper {
            display: flex;
            gap: 40px;
            margin-bottom: 40px;
        }

        .detail-main-image {
            width: 280px;
            height: 280px;
            border-radius: 8px;
            overflow: hidden;
        }

        .detail-main-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .detail-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .detail-title {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            align-self: stretch;
            overflow: hidden;
            color: var(--color-text);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 28px;
            font-style: normal;
            font-weight: 700;
            line-height: 36px;
            margin-bottom: 4px;
        }

        .detail-author {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            overflow: hidden;
            color: var(--color-blue-500);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 15px;
            font-style: normal;
            font-weight: 400;
            line-height: 22px;
            margin-bottom: 16px;
        }

        .detail-description {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            align-self: stretch;
            overflow: hidden;
            color: var(--color-darkpurple-200);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 14px;
            font-style: normal;
            font-weight: 400;
            line-height: 20px;
            margin-bottom: 16px;
        }

        .detail-date {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            overflow: hidden;
            color: var(--color-darkpurple-400);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 14px;
            font-style: normal;
            font-weight: 400;
            line-height: 20px;
            margin-bottom: 24px;
        }

        .detail-actions {
            display: flex;
            height: 48px;
            justify-content: space-between;
            margin-top: auto;
        }

        .detail-actions-left {
            display: flex;
            gap: 8px;
        }

        .detail-actions-right {
            display: flex;
            gap: 8px;
        }

        .btn-copy-code {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            background: #5F32E6;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            color: var(--color-text);
            font-family: Roboto;
            font-size: 15px;
            font-style: normal;
            font-weight: 400;
            line-height: 22px;
            transition: opacity 0.2s ease;
        }

        .btn-copy-code:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-share {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: 8px;
            cursor: pointer;
            transition: opacity 0.2s ease;
        }

        .btn-share:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .share-count {
            color: var(--color-text);
            font-family: Roboto;
            font-size: 15px;
            font-weight: 400;
            line-height: 22px;
            margin-left: 4px;
        }

        .additional-images {
            display: flex;
            justify-content: space-between;
            align-items: center;
            align-self: stretch;
            gap: 20px;
            margin-top: 40px;
        }

        .additional-image {
            width: 184px;
            height: 280px;
            border-radius: 8px;
            object-fit: cover;
        }

        .additional-image-placeholder {
            width: 184px;
            height: 280px;
            border-radius: 8px;
            background: var(--color-surface);
            border: 1px solid var(--color-border);
        }

        .like-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            background: var(--color-surface);
            border: 1px solid var(--color-border);
            border-radius: 8px;
            cursor: pointer;
            color: var(--color-text);
            transition: all 0.2s ease;
        }

        .like-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .like-button.optimistic {
            transform: scale(0.95);
        }

        .like-icon {
            transition: all 0.2s ease;
            opacity: 0.7;
            width: 20px;
            height: 20px;
        }

        .like-icon.active {
            opacity: 1;
            filter: invert(53%) sepia(98%) saturate(3332%) hue-rotate(326deg) brightness(101%) contrast(96%);
        }

        /* 댓글 영역 스타일 */
        .comments-section {
            width: 1080px;
            margin: 40px auto 0;
        }

        .comments-header {
            display: flex;
            align-items: center;
            gap: 4px;
            align-self: stretch;
            margin-bottom: 24px;
        }

        .comments-title {
            overflow: hidden;
            color: var(--Color-Gray-0, #FFF);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 20px;
            font-style: normal;
            font-weight: 700;
            line-height: 26px;
        }

        .comments-count {
            overflow: hidden;
            color: var(--Color-Purple-400, #A072FF);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 20px;
            font-style: normal;
            font-weight: 700;
            line-height: 26px;
        }

        .comment-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .comment-form-inputs {
            display: flex;
            gap: 8px;
        }

        .comment-input {
            display: flex;
            padding: 12px 20px;
            justify-content: center;
            align-items: center;
            gap: 8px;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.04);
            border: none;
            color: var(--Color-Darkpurple-400, #7B7A8E);
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Roboto;
            font-size: 16px;
            font-style: normal;
            font-weight: 400;
            line-height: 24px;
        }

        .comment-textarea-wrapper {
            position: relative;
            display: flex;
            height: 120px;
            padding: 20px;
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
            align-self: stretch;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.04);
        }

        .comment-textarea {
            width: 100%;
            height: 100%;
            border: none;
            background: transparent;
            resize: none;
            color: var(--Color-Darkpurple-400, #7B7A8E);
            font-feature-settings: 'liga' off, 'clig' off;
            font-family: Roboto;
            font-size: 15px;
            font-style: normal;
            font-weight: 400;
            line-height: 22px;
            outline: none;
        }

        .comment-submit {
            display: flex;
            padding: 12px 20px;
            justify-content: center;
            align-items: center;
            gap: 4px;
            position: absolute;
            right: 20px;
            bottom: 20px;
            border-radius: 8px;
            background: var(--Color-Primary-500, #5F32E6);
            border: none;
            color: white;
            cursor: pointer;
        }

        /* 댓글 목록 스타일 */
        .comments-list {
            margin-top: 40px;
            padding-bottom: 60px;
            padding-left: 20px;
            padding-right: 20px;
        }

        .comment-item {
            margin-bottom: 24px;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            align-self: stretch;
            margin-bottom: 12px;
        }

        .comment-info {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .comment-author {
            overflow: hidden;
            color: var(--Color-Gray-0, #FFF);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 16px;
            font-style: normal;
            font-weight: 700;
            line-height: 24px;
        }

        .comment-date {
            overflow: hidden;
            color: var(--Color-Darkpurple-400, #7B7A8E);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 16px;
            font-style: normal;
            font-weight: 400;
            line-height: 24px;
        }

        .comment-delete {
            display: flex;
            width: 24px;
            height: 24px;
            padding: 4px;
            justify-content: center;
            align-items: center;
            border-radius: 4px;
            background: var(--Color-Darkpurple-700, #424254);
            border: none;
            cursor: pointer;
        }

        .comment-delete svg {
            width: 20px;
            height: 20px;
        }

        .comment-content {
            overflow: hidden;
            color: var(--Color-Darkpurple-200, #B7B7C9);
            font-feature-settings: 'liga' off, 'clig' off;
            text-overflow: ellipsis;
            font-family: Roboto;
            font-size: 15px;
            font-style: normal;
            font-weight: 400;
            line-height: 22px;
        }

        .comment-divider {
            height: 1px;
            align-self: stretch;
            background: var(--Color-Darkpurple-700, #424254);
            margin: 24px 0;
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .content-info {
            display: flex;
            gap: 16px;
            align-items: center;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s;
        }

        .edit-btn {
            background-color: var(--Color-Darkpurple-700, #424254);
            color: white;
        }

        .edit-btn:hover {
            background-color: var(--Color-Darkpurple-800, #363645);
        }

        .delete-btn {
            background-color: #FF4B4B;
            color: white;
        }

        .delete-btn:hover {
            background-color: #E63E3E;
        }

        .btn-edit, .btn-delete {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-family: Roboto;
            font-size: 15px;
            font-style: normal;
            font-weight: 400;
            line-height: 22px;
            transition: background-color 0.2s;
            border: none;
            color: var(--color-text);
        }

        .btn-edit {
            background: var(--Color-Darkpurple-700, #424254);
        }

        .btn-edit:hover {
            background: var(--Color-Darkpurple-800, #363645);
        }

        .btn-delete {
            background: #FF4B4B;
        }

        .btn-delete:hover {
            background: #E63E3E;
        }

        .detail-images {
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            gap: 20px;
            margin-top: 40px;
        }

        .detail-image {
            width: 184px;
            height: 280px;
            border-radius: 8px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .detail-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <div class="nav-wrapper">
        <div class="nav">
            <div class="nav-title"><a href="/" style="text-decoration: none; color: inherit;">Customized</a></div>
        </div>
    </div>

    <div class="container">
        <div class="detail-card">
            <div class="detail-content-wrapper">
                <div class="detail-main-image">
                    <img src="<%= 글내용.imageUrls && 글내용.imageUrls.imageFace ? 글내용.imageUrls.imageFace : 'https://customized.b-cdn.net/default.png' %>" alt="메인 이미지">
                </div>
                <div class="detail-content">
                    <h1 class="detail-title"><%= 글내용.title %></h1>
                    <div class="detail-author"><%= 글내용.author %></div>
                    <div class="detail-description"><%= 글내용.content %></div>
                    <div class="detail-date"><%= new Date(글내용.createdAt).toLocaleString() %></div>
                    <div class="detail-actions">
                        <div class="detail-actions-left">
                            <button class="btn-copy-code" onclick="handleCodeCopy('<%= 글내용.code %>')">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M5 6.66667C4.53976 6.66667 4.16667 7.03976 4.16667 7.5V15C4.16667 15.4602 4.53976 15.8333 5 15.8333H12.5C12.9602 15.8333 13.3333 15.4602 13.3333 15V7.5C13.3333 7.03976 12.9602 6.66667 12.5 6.66667H5ZM2.5 7.5C2.5 6.11929 3.61929 5 5 5H12.5C13.8807 5 15 6.11929 15 7.5V15C15 16.3807 13.8807 17.5 12.5 17.5H5C3.61929 17.5 2.5 16.3807 2.5 15V7.5Z" fill="white"/>
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M5 5C5 3.61929 6.11929 2.5 7.5 2.5H15C16.3807 2.5 17.5 3.61929 17.5 5V12.5C17.5 13.8807 16.3807 15 15 15H14.1667V13.3333H15C15.4602 13.3333 15.8333 12.9602 15.8333 12.5V5C15.8333 4.53976 15.4602 4.16667 15 4.16667H7.5C7.03976 4.16667 6.66667 4.53976 6.66667 5V5.83333H5V5Z" fill="white"/>
                                </svg>
                                코드 복사
                            </button>
                            <button class="btn-edit" onclick="handleEdit('<%= 글내용._id %>', '<%= game %>')">수정</button>
                            <button class="btn-delete" onclick="handleDelete('<%= 글내용._id %>')">삭제</button>
                        </div>
                        <div class="detail-actions-right">
                            <button class="like-button" onclick="handleLike('<%= 글내용._id %>')">
                                <img src="/images/heart-icon.svg" alt="좋아요" class="like-icon <%= 글내용.likedUsers?.includes(cookies.userId) ? 'active' : '' %>" />
                                <span class="like-count"><%= 글내용.likeCount || 0 %></span>
                            </button>
                            <button class="btn-share" onclick="handleShare('<%= 글내용._id %>')">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.1666 5.00004C14.1666 5.92052 13.4204 6.66671 12.5 6.66671C12.1848 6.66671 11.8901 6.57923 11.6387 6.42723L7.44468 9.57275C7.48075 9.70912 7.49996 9.85234 7.49996 10C7.49996 10.1477 7.48075 10.291 7.44468 10.4273L11.6387 13.5729C11.8901 13.4209 12.1848 13.3334 12.5 13.3334C13.4204 13.3334 14.1666 14.0796 14.1666 15C14.1666 15.9205 13.4204 16.6667 12.5 16.6667C11.5795 16.6667 10.8333 15.9205 10.8333 15C10.8333 14.8523 10.8525 14.7091 10.8886 14.5728L6.69454 11.4272C6.44319 11.5792 6.14846 11.6667 5.83329 11.6667C4.91282 11.6667 4.16663 10.9205 4.16663 10C4.16663 9.07957 4.91282 8.33337 5.83329 8.33337C6.14846 8.33337 6.44319 8.42085 6.69454 8.57286L10.8886 5.42733C10.8525 5.29096 10.8333 5.14775 10.8333 5.00004C10.8333 4.07957 11.5795 3.33337 12.5 3.33337C13.4204 3.33337 14.1666 4.07957 14.1666 5.00004Z" fill="#7B7A8E"/>
                                </svg>
                                <span class="share-count"><%= 글내용.shareCount || 0 %></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="detail-images">
                <% if (글내용.imageUrls) { %>
                    <% if (글내용.imageUrls.imageFront) { %>
                        <div class="detail-image">
                            <img src="<%= 글내용.imageUrls.imageFront %>" alt="정면 이미지">
                        </div>
                    <% } %>
                    <% if (글내용.imageUrls.imageSide) { %>
                        <div class="detail-image">
                            <img src="<%= 글내용.imageUrls.imageSide %>" alt="측면 이미지">
                        </div>
                    <% } %>
                    <% if (글내용.imageUrls.imageBack) { %>
                        <div class="detail-image">
                            <img src="<%= 글내용.imageUrls.imageBack %>" alt="후면 이미지">
                        </div>
                    <% } %>
                    <% if (글내용.imageUrls.imageDetail1) { %>
                        <div class="detail-image">
                            <img src="<%= 글내용.imageUrls.imageDetail1 %>" alt="상세 이미지 1">
                        </div>
                    <% } %>
                    <% if (글내용.imageUrls.imageDetail2) { %>
                        <div class="detail-image">
                            <img src="<%= 글내용.imageUrls.imageDetail2 %>" alt="상세 이미지 2">
                        </div>
                    <% } %>
                <% } %>
            </div>
        </div>
    </div> 

    <div class="comments-section">
        <div class="comments-header">
            <span class="comments-title">댓글</span>
            <span class="comments-count"><%= 글내용.commentCount || 0 %></span>
        </div>
        <div class="comment-form">
            <div class="comment-form-inputs">
                <input type="text" id="commentAuthor" class="comment-input" placeholder="작성자" style="width: 200px;">
                <input type="password" id="commentPassword" class="comment-input" placeholder="비밀번호" style="width: 200px;">
            </div>
            <div class="comment-textarea-wrapper">
                <textarea id="commentContent" class="comment-textarea" placeholder="댓글을 입력하세요"></textarea>
                <button class="comment-submit" onclick="submitComment()">등록</button>
            </div>
        </div>

        <div class="comments-list" id="commentsList">
            <!-- 댓글이 없을 때 표시 -->
            <div class="no-comments" style="text-align: center; padding: 20px; color: var(--color-text-secondary);">
                댓글이 없습니다.
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
    <script>
        // 버튼 클릭 방지를 위한 타이머 객체
        const buttonTimers = {
            like: null,
            share: null,
            code: null
        };

        // 버튼 클릭 방지 시간 (밀리초)
        const DEBOUNCE_TIME = 500;

        // 코드 복사 기능
        async function handleCodeCopy(code) {
            if (buttonTimers.code) return;

            const copyButton = document.querySelector('.btn-copy-code');
            copyButton.disabled = true;
            buttonTimers.code = setTimeout(() => {
                copyButton.disabled = false;
                buttonTimers.code = null;
            }, DEBOUNCE_TIME);

            try {
                await navigator.clipboard.writeText(code);
                alert('코드가 복사되었습니다.');
            } catch (error) {
                console.error('Copy error:', error);
                alert('코드 복사 중 오류가 발생했습니다.');
            }
        }

        // 공유하기 기능
        async function handleShare(postId) {
            if (buttonTimers.share) return;

            const shareButton = document.querySelector('.btn-share');
            shareButton.disabled = true;
            buttonTimers.share = setTimeout(() => {
                shareButton.disabled = false;
                buttonTimers.share = null;
            }, DEBOUNCE_TIME);

            try {
                const currentUrl = window.location.href;
                await navigator.clipboard.writeText(currentUrl);
                
                const response = await fetch(`/api/share/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();

                if (data.success) {
                    const shareCount = document.querySelector('.share-count');
                    shareCount.textContent = data.shares;
                    alert('링크가 복사되었습니다.');
                }
            } catch (error) {
                console.error('Share error:', error);
                alert('공유하기 중 오류가 발생했습니다.');
            }
        }

        // 좋아요 기능
        async function handleLike(postId) {
            if (buttonTimers.like) return;

            const likeButton = document.querySelector('.like-button');
            const likeCount = document.querySelector('.like-count');
            const likeIcon = document.querySelector('.like-icon');
            
            // 현재 상태 저장
            const isLiked = likeIcon.classList.contains('active');
            const currentCount = parseInt(likeCount.textContent);

            // 낙관적 UI 업데이트
            likeButton.classList.add('optimistic');
            likeIcon.classList.toggle('active');
            likeCount.textContent = isLiked ? currentCount - 1 : currentCount + 1;

            // 디바운스 설정
            likeButton.disabled = true;
            buttonTimers.like = setTimeout(() => {
                likeButton.disabled = false;
                buttonTimers.like = null;
            }, DEBOUNCE_TIME);

            try {
                const response = await fetch(`/api/like/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();

                if (data.success) {
                    // 서버 응답으로 최종 상태 업데이트
                    likeCount.textContent = data.likes;
                    if (data.isLiked) {
                        likeIcon.classList.add('active');
                    } else {
                        likeIcon.classList.remove('active');
                    }
                } else {
                    // 실패 시 원래 상태로 복구
                    likeIcon.classList.toggle('active');
                    likeCount.textContent = currentCount;
                }
            } catch (error) {
                // 에러 시 원래 상태로 복구
                likeIcon.classList.toggle('active');
                likeCount.textContent = currentCount;
                console.error('Like error:', error);
            } finally {
                likeButton.classList.remove('optimistic');
            }
        }

        async function handleEdit(postId) {
            const password = window.prompt('게시물 비밀번호를 입력해주세요.');
            if (!password) return;

            try {
                // 비밀번호 해시화
                const hashedPassword = CryptoJS.SHA256(password).toString();

                // 비밀번호 검증
                const response = await fetch(`/api/verify-password/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password: hashedPassword })
                });

                const data = await response.json();
                
                if (data.isValid) {
                    // 검증 성공 시 수정 페이지로 이동 (해시된 비밀번호 전달)
                    window.location.href = `/<%= game %>/edit/${postId}?password=${hashedPassword}`;
                } else {
                    window.alert('비밀번호가 일치하지 않습니다.');
                }
            } catch (error) {
                console.error('Error:', error);
                window.alert('오류가 발생했습니다.');
            }
        }

        async function handleDelete(postId) {
            try {
                // 비밀번호 입력 받기
                const password = window.prompt('게시물 비밀번호를 입력해주세요.');
                if (!password) {
                    return; // 비밀번호 입력 취소시 종료
                }

                // 삭제 요청 (비밀번호 검증 포함)
                const deleteResponse = await fetch(`/api/delete-post/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password })
                });

                const deleteData = await deleteResponse.json();
                
                if (deleteData.success) {
                    window.alert('게시물이 삭제되었습니다.');
                    window.location.href = '../';
                } else {
                    window.alert('비밀번호가 일치하지 않습니다.');
                }
            } catch (error) {
                console.error('Error:', error);
                window.alert('오류가 발생했습니다.');
            }
        }

        // 댓글 목록 로드
        async function loadComments() {
            try {
                const response = await fetch(`/api/comments/<%= 글내용._id %>`);
                const data = await response.json();
                
                const commentsList = document.getElementById('commentsList');
                if (data.comments && data.comments.length > 0) {
                    commentsList.innerHTML = data.comments.map(comment => `
                        <div class="comment-item">
                            <div class="comment-header">
                                <div class="comment-info">
                                    <span class="comment-author">${comment.author}</span>
                                    <span class="comment-date">${new Date(comment.createdAt).toLocaleString()}</span>
                                </div>
                                <button class="comment-delete" onclick="deleteComment('${comment._id}')">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12.3636 2.66675L13.3333 3.63644L8.96966 8.00008L13.3333 12.3637L12.3636 13.3334L7.99996 8.96978L3.63632 13.3334L2.66663 12.3637L7.03026 8.00008L2.66663 3.63644L3.63632 2.66675L7.99996 7.03038L12.3636 2.66675Z" fill="#7B7A8E"/>
                                    </svg>
                                </button>
                            </div>
                            <div class="comment-content">${comment.content}</div>
                            <div class="comment-divider"></div>
                        </div>
                    `).join('');
                } else {
                    commentsList.innerHTML = '<div class="no-comments" style="text-align: center; padding: 20px; color: var(--color-text-secondary);">댓글이 없습니다.</div>';
                }
            } catch (error) {
                console.error('댓글 로드 중 오류:', error);
            }
        }

        // 댓글 작성
        async function submitComment() {
            const author = document.getElementById('commentAuthor').value.trim();
            const password = document.getElementById('commentPassword').value.trim();
            const content = document.getElementById('commentContent').value.trim();
            
            if (!author || !password || !content) {
                alert('작성자, 비밀번호, 댓글 내용을 모두 입력해주세요.');
                return;
            }

            const submitButton = document.querySelector('.comment-submit');
            submitButton.disabled = true;

            try {
                const response = await fetch('/api/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        postId: '<%= 글내용._id %>',
                        author,
                        password,
                        content
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    // 입력 필드 초기화
                    document.getElementById('commentAuthor').value = '';
                    document.getElementById('commentPassword').value = '';
                    document.getElementById('commentContent').value = '';
                    
                    // 댓글 목록 새로고침
                    await loadComments();
                    
                    // 댓글 수 업데이트
                    const commentsCount = document.querySelector('.comments-count');
                    const currentCount = parseInt(commentsCount.textContent);
                    commentsCount.textContent = currentCount + 1;
                } else {
                    alert('댓글 작성에 실패했습니다.');
                }
            } catch (error) {
                console.error('댓글 작성 중 오류:', error);
                alert('댓글 작성 중 오류가 발생했습니다.');
            } finally {
                submitButton.disabled = false;
            }
        }

        // 댓글 삭제
        async function deleteComment(commentId) {
            const password = window.prompt('댓글 비밀번호를 입력해주세요.');
            if (!password) return;

            try {
                const response = await fetch(`/api/comments/${commentId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password })
                });

                const data = await response.json();
                
                if (data.success) {
                    // 댓글 목록 새로고침
                    await loadComments();
                    
                    // 댓글 수 업데이트
                    const commentsCount = document.querySelector('.comments-count');
                    const currentCount = parseInt(commentsCount.textContent);
                    commentsCount.textContent = currentCount - 1;
                } else {
                    alert('비밀번호가 일치하지 않습니다.');
                }
            } catch (error) {
                console.error('댓글 삭제 중 오류:', error);
                alert('댓글 삭제 중 오류가 발생했습니다.');
            }
        }

        // 페이지 로드 시 댓글 목록 로드
        document.addEventListener('DOMContentLoaded', loadComments);
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>